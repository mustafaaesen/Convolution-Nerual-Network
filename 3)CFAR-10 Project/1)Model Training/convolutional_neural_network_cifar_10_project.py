# -*- coding: utf-8 -*-
"""Convolutional Neural Network-CIFAR-10 Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1AQl-B5ldOHfLXK3T3aYyutOc9PasyloY
"""

#10 sınıftan oluşan renkli görsel veri seti olan CIFAR-10
#ile cnn modeli eğitip farklı projede bu modeli test edeceğiz
#Bu kısım model eğitim kısmıdır.
#32x32 boyutunda ve renkli 3 kanal RGB çalışır

import tensorflow as tf
#derin öğrenme modeli için gereklidir

from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense,Dropout
from tensorflow.keras.utils import to_categorical
#CNN modeli oluşturmak için gereklidir

from tensorflow.keras.datasets import cifar10
#CIFAR-10 veri setini yüklemek için

import numpy as np

import matplotlib.pyplot as plt
#Görselleştirmek için

#CIFAR-10 veri setini yükleme

(x_train, y_train),(x_test, y_test) = cifar10.load_data()
#cifar-10 veri setini indirip eğitim ve test verisi olarak ayırma

print("Eğitim verisi şekli:",x_train.shape)
print("Test verisi şekli:",x_test.shape)

"""
Görseller 32x32 boyutunda 3 kanallı RGB şeklinde etiketler 0-9 arasında bunlara isim verilmeli

"""

#Etiket Tanımlama

etiket_isimleri =[
    "Uçak","Araba","Kuş","Kedi","Geyik","Köpek","Kurbağa","At","Gemi","Kamyon"
]

#Veri Ön İşleme

x_train = x_train/255.0 # pixel değerlerini 0-1 arasında normalize etme
x_test=x_test/255.0

y_train=to_categorical(y_train,10)
y_test = to_categorical(y_test,10)
#etiketleri softmax için one-hot encode yapma

#CNN Modelini Oluşturma

model=Sequential()
#sıralı model oluşturma

model.add(Conv2D(32,(3,3),activation='relu', input_shape=(32, 32, 3)))
#ilk convolutioanl katman  32 filtre 3x3 boyut aktivasyon ReLU
# 32x32 renkli 3 kanal giriş şekli

model.add(MaxPooling2D((2,2)))#Görütüyü küçültmek için 2x2

model.add(Conv2D(64, (3,3), activation='relu'))
#ikinci convolutional 64 filtre daha derin özellikler
model.add(MaxPooling2D((2,2)))
#daha derin özellikleri görebilir

model.add(Conv2D(128,(3, 3),activation='relu'))
#üçüncü convolutional katman Daha fazla filtre 12 detay öğrenme için

model.add(Flatten())# katmanları düzleştirir 2D-->1D

model.add(Dense(128,activation='relu'))
#yoğun bağlantılı katman 128 nöron

model.add(Dropout(0.5))
#Bu kataman %50 oranında bazı nöronları pasif hale getirir. overfittingi azaltmak
#için

model.add(Dense(10,activation='softmax'))

#Model Derleme

#Modeli optimizer loss fonksiyonları ile derleyip metriklerini accuracy aldık

model.compile(
    optimizer='adam',   #optimizasyon algoritması
    loss='categorical_crossentropy', #çok sınıflı sınıflandırma
    metrics=['accuracy']   #doğruluk metriği
)

#Model Eğitimi

#modeli 10 kez her seferinde 64 örnek olacak şekilde eğitiyoruz

model.fit(
    x_train,y_train,
    epochs=10,
    batch_size=64,
    validation_data=(x_test, y_test) #eğitim sırasında test seti ile başarı takibi
)

#Modeli Kaydetme

model.save("cifar-10_modeli.h5")
print("Model başarıyla .h5 dosyasına kaydedildi")

#Modeli İndirme

from google.colab import files

files.download("cifar-10_modeli.h5")