# -*- coding: utf-8 -*-
"""Convolutional Neural Network-Fashion MNIST Project.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1hlCwD-GnG-pQkwiGPwFoiftsLPBo8uyn
"""

#Fashion MNIST

#daha önce cnn ile yaptığımız mnist veri seti çalışmasını bu sefer
#farklı bir mnist veri seti ile yapacğız moda ile alakalı olanı

import tensorflow as tf
from tensorflow.keras.models import Sequential, load_model
from tensorflow.keras.layers import Conv2D, MaxPooling2D,Flatten, Dense
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.datasets import fashion_mnist
import matplotlib.pyplot as plt
import numpy as np

#Veri Seti Yükleme ve Kontrol Etme

(x_train, y_train),(x_test, y_test)=fashion_mnist.load_data()
#veri setini yükleyerek eğitim ve test verisi olarak ayırma
#(x_train,y_train)--->eğitim görselleri ve etiketleri
#(x_test, y_test) --->test görsel ve etiketleri


print("Eğitim verisi şekli:",x_train.shape)
print("Test verisi şekli",x_test.shape)
#şekillerin kontrolü

#Ön işleme ve One-hot Encode

x_train = x_train/255.0
x_test = x_test/255.0
#Görsellerde veri seti 0-255 arasındadır daha hızlı ve stabil
#eğitim için 0-1 arasında normalize etmeliyiz.

x_train = x_train.reshape(-1,28,28,1)
x_test = x_test.reshape(-1,28,28,1)
#CNN modeli 4 parametre alir
"""
örnek sayısı,
genişlik
yükseklik
kanal
"""
#Gri toonlamalı olmdığı için kanal sayısı 1

y_train = to_categorical(y_train,10)
y_test = to_categorical(y_test,10)
#etiketleri one-hot encode etmek

#Kategori Etiketleri(Sınıf Adları)

#0-9 arası sınıf isimleri

etiket_isimleri = [
    "T-shirt/top","Pantolon","Kazak","Elbise","Palto",
    "Sandalet","Gömlek","Spor Ayakkabı","Çanta","Bot"
]

#CNN Modeli Oluşturma

#sıralı bir model oluşturmak için
model =Sequential()

model.add(Conv2D(32, (3,3 ),activation='relu', input_shape=(28,28,1)))
#ilk katman iin 32 filtre 3x3 boyut ReLU aktivasyonu
#Bu kartman kenar,köşe, gibi  özellikleri taşır

model.add(MaxPooling2D((2,2)))
#ilk MaxPooling katmanı

"""
Görseli küçültür (2x2) önemli bilgileri tutar
(boyutu azaktı overfitting riskini düşürür)
"""

model.add(Conv2D(64, (3,3),activation='relu'))
#İkinci convulational katman Görselleri daha derin tanır

model.add(MaxPooling2D((2,2)))
#ikinci maxpooling

model.add(Flatten())
#Flatten katmanı 2D görrüntüyüü düzleştirir->1D ye çevirir

model.add(Dense(128, activation='relu'))
#Dense -->Öğrenilen özelliklere göre sınıflandırma yapar

model.add(Dense(10,activation='softmax'))
#Çıkış katmanı 10 sınıf olduğu için 10 nöron, softmax ile olasılık tahmini yapılır

#Model Derleme

#Modeli derlerken oprtimizer kayıp fonksiyonları ve başarı metriği belirleniyor

model.compile(
    optimizer='adam',  #Ağırlıkları güncellemek için kullanılan algoritma
    loss='categorical_crossentropy', #Çok sınıflı sınıflandırmalar için uygun kayıp
    metrics=['accuracy'] # Doğruluk oranını ölçme
)

#Model Eğitimi

#modeli eğitimek için epıchs 5 oldu 5 kez tüm veriler modelden geçecek
#her adıdmda 128 örnek kullanılacak

model.fit(
    x_train,y_train,
    epochs=5,
    batch_size=128,
    validation_data=(x_test,y_test) #Eğitim sırasında test başarımını ölç
)

#Eğitilen Modeli Kaydetmek

model.save("fashion_mnist_modeli.h5")
print("Model başarıyla kaydedildi")

#Modeli İndirme
from google.colab import files

# Daha önce kaydettiğin model dosyasını indir
files.download("fashion_mnist_modeli.h5")